// Code generated by mockery v2.20.0. DO NOT EDIT.

package fs

import (
	context "context"
	model "part1/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockDatalogic is an autogenerated mock type for the Datalogic type
type MockDatalogic struct {
	mock.Mock
}

// CalculateOhlc provides a mock function with given fields: ctx, prevExist, prevOhlc, req
func (_m *MockDatalogic) CalculateOhlc(ctx context.Context, prevExist bool, prevOhlc model.Ohlc, req model.Transaction) (model.Ohlc, error) {
	ret := _m.Called(ctx, prevExist, prevOhlc, req)

	var r0 model.Ohlc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, model.Ohlc, model.Transaction) (model.Ohlc, error)); ok {
		return rf(ctx, prevExist, prevOhlc, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, model.Ohlc, model.Transaction) model.Ohlc); ok {
		r0 = rf(ctx, prevExist, prevOhlc, req)
	} else {
		r0 = ret.Get(0).(model.Ohlc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, model.Ohlc, model.Transaction) error); ok {
		r1 = rf(ctx, prevExist, prevOhlc, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOhlcDataFromRedis provides a mock function with given fields: ctx, stockCode
func (_m *MockDatalogic) GetOhlcDataFromRedis(ctx context.Context, stockCode string) (bool, model.Ohlc, error) {
	ret := _m.Called(ctx, stockCode)

	var r0 bool
	var r1 model.Ohlc
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, model.Ohlc, error)); ok {
		return rf(ctx, stockCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, stockCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) model.Ohlc); ok {
		r1 = rf(ctx, stockCode)
	} else {
		r1 = ret.Get(1).(model.Ohlc)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, stockCode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreOhlcData provides a mock function with given fields: ctx, summary
func (_m *MockDatalogic) StoreOhlcData(ctx context.Context, summary model.Ohlc) error {
	ret := _m.Called(ctx, summary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Ohlc) error); ok {
		r0 = rf(ctx, summary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockDatalogic interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDatalogic creates a new instance of MockDatalogic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDatalogic(t mockConstructorTestingTNewMockDatalogic) *MockDatalogic {
	mock := &MockDatalogic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
