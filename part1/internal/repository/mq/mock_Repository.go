// Code generated by mockery v2.20.0. DO NOT EDIT.

package mq

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: ctx, topic, value
func (_m *MockRepository) SendMessage(ctx context.Context, topic string, value string) (int32, int64, error) {
	ret := _m.Called(ctx, topic, value)

	var r0 int32
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int32, int64, error)); ok {
		return rf(ctx, topic, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int32); ok {
		r0 = rf(ctx, topic, value)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int64); ok {
		r1 = rf(ctx, topic, value)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, topic, value)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
